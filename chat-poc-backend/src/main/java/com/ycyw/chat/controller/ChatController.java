package com.ycyw.chat.controller;

import com.ycyw.chat.model.ChatMessage;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

/**
 * Contr√¥leur responsable de la gestion des messages du chat.
 * - Re√ßoit les messages envoy√©s par les clients via WebSocket/STOMP.
 * - R√©√©met ces messages √† tous les abonn√©s du topic public.
 * - Ajoute une r√©ponse automatique "SupportBot" pour prouver la faisabilit√©.
 */
@Controller
public class ChatController {

    /**
     * Outil fourni par Spring pour envoyer des messages vers les clients connect√©s
     */
    private final SimpMessagingTemplate messagingTemplate;

    public ChatController(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }

    /**
     * M√©thode appel√©e lorsqu‚Äôun message est envoy√© sur la destination
     * "/app/chat.sendMessage".
     * 
     * @param message le message envoy√© par le client
     */
    @MessageMapping("/chat.sendMessage")
    public void receiveMessage(@Payload ChatMessage message) {
        // Diffuse le message du client √† tous les abonn√©s du topic "/topic/public"
        messagingTemplate.convertAndSend("/topic/public", message);

        // G√©n√®re une r√©ponse automatique envoy√©e par un "bot"
        ChatMessage botReply = new ChatMessage(
                "SupportBot",
                "Merci pour votre message üëã Un conseiller va vous r√©pondre.",
                message.getTimestamp());

        // Diffuse aussi la r√©ponse du bot
        messagingTemplate.convertAndSend("/topic/public", botReply);
    }
}
